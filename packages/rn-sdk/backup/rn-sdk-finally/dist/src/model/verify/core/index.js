var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.wrapExtraData=exports.unLockTempWallet=exports.rememberUseBiometric=exports.lockWallet=exports.isWalletUnlocked=exports.isWalletExists=exports.getVerifiedAndLockWallet=exports.getUseBiometric=exports.getTempWalletConfig=exports.exitWallet=exports.checkPin=exports.changePin=exports.AccountOriginalType=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _device=require("../../../packages/types/types-ca/device");var _utils=require("../../../packages/utils");var _CommonToast=_interopRequireDefault(require("../../../components/CommonToast"));var _constants=require("../../../global/constants");var _global=require("../../global");var _controller=require("../../../network/controller");var _wallet=require("../../../network/dto/wallet");var _storage=require("../../../service/storage");var _crypto=require("../../../utils/crypto");var PIN_KEY='pin';var WALLET_CONFIG_KEY='walletConfig';var USE_BIOMETRIC_KEY='useBiometric';var LOCAL_WALLET_CONFIG_KEY='localWalletConfig';var wrapExtraData=exports.wrapExtraData=function wrapExtraData(){var extraData=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DefaultExtraData;return JSON.stringify({deviceInfo:JSON.stringify(extraData),transactionTime:Date.now()});};var DefaultExtraData={deviceName:'Other',deviceType:_device.DeviceType.OTHER};var AccountOriginalType=exports.AccountOriginalType=function(AccountOriginalType){AccountOriginalType[AccountOriginalType["Email"]=0]="Email";AccountOriginalType[AccountOriginalType["Phone"]=1]="Phone";AccountOriginalType[AccountOriginalType["Google"]=2]="Google";AccountOriginalType[AccountOriginalType["Apple"]=3]="Apple";return AccountOriginalType;}({});var getVerifiedAndLockWallet=exports.getVerifiedAndLockWallet=function(){var _ref=(0,_asyncToGenerator2.default)(function*(deliveredAfterVerifiedConfig,pinValue,setBiometrics){try{var afterVerifiedConfig=JSON.parse(deliveredAfterVerifiedConfig);var _ref2=afterVerifiedConfig||{},normalVerifyPathInfo=_ref2.normalVerifyPathInfo,scanQRCodePathInfo=_ref2.scanQRCodePathInfo;console.log('afterVerifiedConfig',afterVerifiedConfig);var walletConfig=null;if(normalVerifyPathInfo){walletConfig=yield handleNormalVerify(normalVerifyPathInfo);}else if(scanQRCodePathInfo){walletConfig=yield handleScanQRCodeVerify(scanQRCodePathInfo);}if(!walletConfig)throw new Error('create wallet failed.');yield createWallet(pinValue,walletConfig);rememberUseBiometric(setBiometrics!=null?setBiometrics:false,walletConfig);yield(0,_utils.sleep)(500);return true;}catch(e){console.error(e);_CommonToast.default.fail('Network failed, please try again later');}return false;});return function getVerifiedAndLockWallet(_x,_x2,_x3){return _ref.apply(this,arguments);};}();var handleNormalVerify=function(){var _ref3=(0,_asyncToGenerator2.default)(function*(config){var _status$items$find,_status$items;var retryTimes=100;var originalChainId=yield _constants.PortkeyConfig.currChainId();var _ref4=config||{},fromRecovery=_ref4.fromRecovery,accountIdentifier=_ref4.accountIdentifier;var _yield$requestSocialR=yield(0,_global.requestSocialRecoveryOrRegister)(config),sessionId=_yield$requestSocialR.sessionId,publicKey=_yield$requestSocialR.publicKey,privateKey=_yield$requestSocialR.privateKey,address=_yield$requestSocialR.address;if(!sessionId||!publicKey){throw new Error('request failed');}var status=yield(0,_controller.handleRequestPolling)({sendRequest:function sendRequest(){return fromRecovery?_controller.NetworkController.checkSocialRecoveryProcess(sessionId,{maxWaitingTime:3000}):_controller.NetworkController.checkRegisterProcess(sessionId,{maxWaitingTime:3000});},maxPollingTimes:retryTimes,timeGap:500,verifyResult:function verifyResult(result){var _ref5=result||{},items=_ref5.items;var item=items==null?void 0:items.find(function(it){return it.chainId===originalChainId;});if(item){return(0,_wallet.isRecoveryStatusItem)(item)?item.recoveryStatus===_wallet.ProgressStatus.PASS:item.registerStatus===_wallet.ProgressStatus.PASS;}else{return false;}},declareFatalFail:function declareFatalFail(alternative){var _ref6=alternative||{},items=_ref6.items;var item=items==null?void 0:items.find(function(it){return it.chainId===originalChainId;});if(item){return(0,_wallet.isRecoveryStatusItem)(item)?item.recoveryStatus===_wallet.ProgressStatus.FAIL:item.registerStatus===_wallet.ProgressStatus.FAIL;}else{return false;}}});if(findVerifyProcessOnCurrChain(originalChainId,status)!==_wallet.ProgressStatus.PASS){console.warn("after "+retryTimes+" times polling, account status is still pending.");}return{sessionId:sessionId,fromRecovery:fromRecovery,accountIdentifier:accountIdentifier,publicKey:publicKey,privateKey:privateKey,address:address,originalChainId:originalChainId,caInfo:(_status$items$find=status==null?void 0:(_status$items=status.items)==null?void 0:_status$items.find(function(it){return it.chainId===originalChainId;}))!=null?_status$items$find:undefined};});return function handleNormalVerify(_x4){return _ref3.apply(this,arguments);};}();var handleScanQRCodeVerify=function(){var _ref7=(0,_asyncToGenerator2.default)(function*(config){var _ref8=config||{},walletInfo=_ref8.walletInfo,accountIdentifier=_ref8.accountIdentifier,caHash=_ref8.caHash,caAddress=_ref8.caAddress,originalChainId=_ref8.originalChainId;return Object.assign({},walletInfo,{accountIdentifier:accountIdentifier,originalChainId:originalChainId,caInfo:{caHash:caHash,caAddress:caAddress}});});return function handleScanQRCodeVerify(_x5){return _ref7.apply(this,arguments);};}();var findVerifyProcessOnCurrChain=function findVerifyProcessOnCurrChain(chainId,status){var _ref9=status||{},items=_ref9.items;var item=items==null?void 0:items.find(function(it){return it.chainId===chainId;});if(item){return(0,_wallet.isRecoveryStatusItem)(item)?item.recoveryStatus:item.registerStatus;}return undefined;};var createWallet=function(){var _ref10=(0,_asyncToGenerator2.default)(function*(pinValue,config){var walletInfo=JSON.stringify(config);var encryptedWalletConfig=(0,_crypto.encrypt)(walletInfo,pinValue);_storage.GlobalStorage.set(WALLET_CONFIG_KEY,encryptedWalletConfig);_storage.TempStorage.set(WALLET_CONFIG_KEY,walletInfo);});return function createWallet(_x6,_x7){return _ref10.apply(this,arguments);};}();var rememberUseBiometric=exports.rememberUseBiometric=function(){var _ref11=(0,_asyncToGenerator2.default)(function*(useBiometric,config){var walletInfo=JSON.stringify(config);_storage.GlobalStorage.set(USE_BIOMETRIC_KEY,useBiometric);_storage.GlobalStorage.set(LOCAL_WALLET_CONFIG_KEY,yield(0,_crypto.encryptLocal)(walletInfo));});return function rememberUseBiometric(_x8,_x9){return _ref11.apply(this,arguments);};}();var getUseBiometric=exports.getUseBiometric=function(){var _ref12=(0,_asyncToGenerator2.default)(function*(){var _yield$GlobalStorage$;return(_yield$GlobalStorage$=yield _storage.GlobalStorage.getBoolean(USE_BIOMETRIC_KEY))!=null?_yield$GlobalStorage$:false;});return function getUseBiometric(){return _ref12.apply(this,arguments);};}();var isWalletUnlocked=exports.isWalletUnlocked=function(){var _ref13=(0,_asyncToGenerator2.default)(function*(){var tempWalletConfig=yield _storage.TempStorage.getString(WALLET_CONFIG_KEY);return!!tempWalletConfig;});return function isWalletUnlocked(){return _ref13.apply(this,arguments);};}();var lockWallet=exports.lockWallet=function(){var _ref14=(0,_asyncToGenerator2.default)(function*(){_storage.TempStorage.remove(WALLET_CONFIG_KEY);});return function lockWallet(){return _ref14.apply(this,arguments);};}();var exitWallet=exports.exitWallet=function(){var _ref15=(0,_asyncToGenerator2.default)(function*(){_storage.GlobalStorage.remove(PIN_KEY);_storage.GlobalStorage.remove(USE_BIOMETRIC_KEY);_storage.GlobalStorage.remove(WALLET_CONFIG_KEY);_storage.TempStorage.remove(WALLET_CONFIG_KEY);});return function exitWallet(){return _ref15.apply(this,arguments);};}();var getTempWalletConfig=exports.getTempWalletConfig=function(){var _ref16=(0,_asyncToGenerator2.default)(function*(){var tempWalletConfig=yield _storage.TempStorage.getString(WALLET_CONFIG_KEY);if(!tempWalletConfig)throw new Error('wallet not unlocked');return JSON.parse(tempWalletConfig);});return function getTempWalletConfig(){return _ref16.apply(this,arguments);};}();var isWalletExists=exports.isWalletExists=function(){var _ref17=(0,_asyncToGenerator2.default)(function*(){var walletConfig=yield _storage.GlobalStorage.getString(WALLET_CONFIG_KEY);return!!walletConfig;});return function isWalletExists(){return _ref17.apply(this,arguments);};}();var checkPin=exports.checkPin=function(){var _ref18=(0,_asyncToGenerator2.default)(function*(pinValue){try{var encrypted=yield _storage.GlobalStorage.getString(WALLET_CONFIG_KEY);if(!encrypted||!pinValue)throw new Error('wallet not exist');var decrypted=(0,_crypto.decrypt)(encrypted,pinValue);console.log('decrypted',decrypted);var decryptedWalletConfig=JSON.parse(decrypted);return!!decryptedWalletConfig;}catch(e){console.log('checkPin error',e);return false;}});return function checkPin(_x10){return _ref18.apply(this,arguments);};}();var changePin=exports.changePin=function(){var _ref19=(0,_asyncToGenerator2.default)(function*(pinValue){_storage.GlobalStorage.set(PIN_KEY,pinValue);});return function changePin(_x11){return _ref19.apply(this,arguments);};}();var unLockTempWallet=exports.unLockTempWallet=function(){var _ref20=(0,_asyncToGenerator2.default)(function*(pinValue){var useBiometric=arguments.length>1&&arguments[1]!==undefined?arguments[1]:false;try{if(yield isWalletUnlocked()){return true;}var decrypted;if(useBiometric){var encrypted=yield _storage.GlobalStorage.getString(LOCAL_WALLET_CONFIG_KEY);console.log('encrypted',encrypted);if(!encrypted)throw new Error('wallet not exist');decrypted=yield(0,_crypto.encryptLocal)(encrypted);}else{var _encrypted=yield _storage.GlobalStorage.getString(WALLET_CONFIG_KEY);if(!_encrypted||!pinValue)throw new Error('wallet not exist');decrypted=(0,_crypto.decrypt)(_encrypted,pinValue);}var decryptedWalletConfig=JSON.parse(decrypted);if(!decryptedWalletConfig)throw new Error('decrypt error!');_storage.TempStorage.set(WALLET_CONFIG_KEY,decrypted);return true;}catch(e){console.log('unlock wallet failed',e);return false;}});return function unLockTempWallet(_x12){return _ref20.apply(this,arguments);};}();