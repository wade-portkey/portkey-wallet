var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _miscState=require("test/data/miscState");var _render=require("test/utils/render");var _setup=require("test/utils/setup");var _misc=require("./misc");var _=require("./..");var _react=require("@testing-library/react");var MiscActions=_interopRequireWildcard(require("packages/types/store-ca/misc/actions"));var indexHook=_interopRequireWildcard(require("./index"));var networkHook=_interopRequireWildcard(require("./network"));var _networkState=require("test/data/networkState");var _country=require("../../constants/constants-ca/country");var _socketDid=_interopRequireDefault(require("../../socket/socket-did"));function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}jest.mock("../index",function(){return{useAppCommonDispatch:jest.fn()};});beforeEach(function(){jest.resetAllMocks();jest.clearAllMocks();jest.restoreAllMocks();});describe('useMisc',function(){test('get misc data successfully',function(){var _renderHookWithProvid=(0,_render.renderHookWithProvider)(_misc.useMisc,(0,_setup.setupStore)(_miscState.MiscState)),result=_renderHookWithProvid.result;expect(result.current).toHaveProperty('phoneCountryCodeListChainMap');expect(result.current).toHaveProperty('defaultPhoneCountryCode');expect(result.current.defaultPhoneCountryCode).toEqual(_miscState.MiscState.misc.defaultPhoneCountryCode);});test('failed to get misc data',function(){var _renderHookWithProvid2=(0,_render.renderHookWithProvider)(_misc.useMisc,(0,_setup.setupStore)({})),result=_renderHookWithProvid2.result;expect(result.current).toBeUndefined();});});describe('useSetLocalPhoneCountryCode',function(){it('should call useAppCommonDispatch with setLocalPhoneCountryCodeAction when called',function(){var dispatchMock=jest.fn();var countryItemMock={country:'US',code:'+1',iso:'US'};_.useAppCommonDispatch.mockReturnValue(dispatchMock);jest.spyOn(MiscActions,'setLocalPhoneCountryCodeAction').mockImplementation(jest.fn());var _renderHook=(0,_react.renderHook)(function(){return(0,_misc.useSetLocalPhoneCountryCode)();}),result=_renderHook.result;var setLocalPhoneCountryCode=result.current;setLocalPhoneCountryCode(countryItemMock);expect(_.useAppCommonDispatch).toHaveBeenCalled();expect(MiscActions.setLocalPhoneCountryCodeAction).toHaveBeenCalled();});});describe('usePhoneCountryCode',function(){test('should return correct values',function(){var dispatchMock=jest.fn();var useAppCASelectorMock=jest.fn().mockReturnValue(_miscState.MiscState.misc);jest.spyOn(indexHook,'useAppCASelector').mockImplementation(useAppCASelectorMock);jest.spyOn(networkHook,'useCurrentNetworkInfo').mockReturnValue(_networkState.TestnetNetworkInfo);jest.spyOn(networkHook,'useNetworkList').mockReturnValue([_networkState.TestnetNetworkInfo,_networkState.MainnetNetworkInfo]);_.useAppCommonDispatch.mockReturnValue(dispatchMock);jest.spyOn(MiscActions,'getPhoneCountryCode').mockImplementation(jest.fn());var _renderHook2=(0,_react.renderHook)(function(){return(0,_misc.usePhoneCountryCode)(true);}),result=_renderHook2.result;expect(result.current.phoneCountryCodeList).toHaveLength(8);expect(result.current.phoneCountryCodeIndex).toHaveLength(7);expect(result.current.localPhoneCountryCode).toEqual(_miscState.MiscState.misc.localPhoneCountryCode);});test('not localPhoneCountryCode, and return correct values',function(){var _MiscState$misc$phone;var dispatchMock=jest.fn();var useAppCASelectorMock=jest.fn().mockReturnValue({phoneCountryCodeListChainMap:[(_MiscState$misc$phone=_miscState.MiscState.misc.phoneCountryCodeListChainMap)==null?void 0:_MiscState$misc$phone.MAIN],defaultPhoneCountryCode:_miscState.MiscState.misc.defaultPhoneCountryCode});jest.spyOn(indexHook,'useAppCASelector').mockImplementation(useAppCASelectorMock);jest.spyOn(networkHook,'useCurrentNetworkInfo').mockReturnValue(_networkState.TestnetNetworkInfo);jest.spyOn(networkHook,'useNetworkList').mockReturnValue([_networkState.TestnetNetworkInfo,_networkState.MainnetNetworkInfo]);_.useAppCommonDispatch.mockReturnValue(dispatchMock);jest.spyOn(MiscActions,'getPhoneCountryCode').mockImplementation(jest.fn());var _renderHook3=(0,_react.renderHook)(function(){return(0,_misc.usePhoneCountryCode)(true);}),result=_renderHook3.result;expect(result.current.phoneCountryCodeList).toHaveLength(0);expect(result.current.phoneCountryCodeIndex).toHaveLength(0);expect(result.current.localPhoneCountryCode).toEqual(_miscState.MiscState.misc.defaultPhoneCountryCode);});test('not localPhoneCountryCode and defaultPhoneCountryCode, and return correct values',function(){var _MiscState$misc$phone2;var dispatchMock=jest.fn();var useAppCASelectorMock=jest.fn().mockReturnValue({phoneCountryCodeListChainMap:[(_MiscState$misc$phone2=_miscState.MiscState.misc.phoneCountryCodeListChainMap)==null?void 0:_MiscState$misc$phone2.MAIN]});jest.spyOn(indexHook,'useAppCASelector').mockImplementation(useAppCASelectorMock);jest.spyOn(networkHook,'useCurrentNetworkInfo').mockReturnValue(_networkState.TestnetNetworkInfo);jest.spyOn(networkHook,'useNetworkList').mockReturnValue([_networkState.TestnetNetworkInfo,_networkState.MainnetNetworkInfo]);_.useAppCommonDispatch.mockReturnValue(dispatchMock);jest.spyOn(MiscActions,'getPhoneCountryCode').mockImplementation(jest.fn());var _renderHook4=(0,_react.renderHook)(function(){return(0,_misc.usePhoneCountryCode)(true);}),result=_renderHook4.result;expect(result.current.phoneCountryCodeList).toHaveLength(0);expect(result.current.phoneCountryCodeIndex).toHaveLength(0);expect(result.current.localPhoneCountryCode).toEqual(_country.DefaultCountry);});test('should dispatch getPhoneCountryCode only for current networkType when not initializing',function(){var dispatchMock=jest.fn();var useAppCASelectorMock=jest.fn().mockReturnValue(_miscState.MiscState.misc);jest.spyOn(indexHook,'useAppCASelector').mockImplementation(useAppCASelectorMock);jest.spyOn(networkHook,'useCurrentNetworkInfo').mockReturnValue(_networkState.TestnetNetworkInfo);jest.spyOn(networkHook,'useNetworkList').mockReturnValue([_networkState.TestnetNetworkInfo,_networkState.MainnetNetworkInfo]);_.useAppCommonDispatch.mockReturnValue(dispatchMock);jest.spyOn(MiscActions,'getPhoneCountryCode').mockImplementation(jest.fn());var _renderHook5=(0,_react.renderHook)(_misc.usePhoneCountryCode),result=_renderHook5.result,rerender=_renderHook5.rerender;rerender(true);expect(result.current.phoneCountryCodeList).toHaveLength(8);expect(result.current.phoneCountryCodeIndex).toHaveLength(7);expect(result.current.localPhoneCountryCode).toEqual(_miscState.MiscState.misc.localPhoneCountryCode);});});describe('useIsScanQRCode',function(){beforeEach(function(){jest.clearAllMocks();jest.restoreAllMocks();});it('should return false by default',function(){var _renderHook6=(0,_react.renderHook)(function(){return(0,_misc.useIsScanQRCode)(undefined);}),result=_renderHook6.result;expect(result.current).toBe(false);});it('should set isScanQRCode to true when onScanLogin is called',function(){jest.spyOn(_socketDid.default,'stop').mockImplementation(jest.fn());jest.spyOn(_socketDid.default,'onScanLogin').mockImplementation(jest.fn(function(callback){callback==null?void 0:callback({});return{remove:jest.fn()};}));jest.spyOn(_socketDid.default,'doOpen').mockImplementation(jest.fn());var _renderHook7=(0,_react.renderHook)(function(){return(0,_misc.useIsScanQRCode)('clientId');}),result=_renderHook7.result;expect(result.current).toBe(true);});it('signalrDid.stop throw error, and catch error',(0,_asyncToGenerator2.default)(function*(){jest.spyOn(_socketDid.default,'stop').mockImplementation(jest.fn(function(){throw Error;}));jest.spyOn(_socketDid.default,'onScanLogin').mockImplementation(jest.fn(function(callback){callback==null?void 0:callback({});return{remove:jest.fn()};}));jest.spyOn(_socketDid.default,'doOpen').mockRejectedValue({error:'signalrDid.doOpen'});var _renderHook8=(0,_react.renderHook)(function(){return(0,_misc.useIsScanQRCode)('clientId');}),result=_renderHook8.result;expect(result.current).toBe(true);}));});