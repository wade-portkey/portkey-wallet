var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.default=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _react=require("react");var _bignumber=_interopRequireDefault(require("bignumber.js"));var _useInterval=_interopRequireDefault(require("../useInterval"));var _index=require("./index");var _aelfSdk=_interopRequireDefault(require("aelf-sdk"));var _balance=require("../../utils/balance");var bigNAN=new _bignumber.default('');var privateKey1='96ab8ea91edbd17f80049daaa92949c1ef2356f1215fbc252e044c7b0b5a3e13';var wallet1=_aelfSdk.default.wallet.getWalletByPrivateKey(privateKey1);var useBalances=function useBalances(_ref){var tokens=_ref.tokens,tokenAddress=_ref.tokenAddress,rpcUrl=_ref.rpcUrl,_ref$delay=_ref.delay,delay=_ref$delay===void 0?10000:_ref$delay;var deArr=(0,_react.useMemo)(function(){return Array.isArray(tokens)?tokens.map(function(){return bigNAN;}):[bigNAN];},[tokens]);var _useState=(0,_react.useState)(deArr),_useState2=(0,_slicedToArray2.default)(_useState,2),balances=_useState2[0],setBalances=_useState2[1];var _useAppEOASelector=(0,_index.useAppEOASelector)(function(state){return state.wallet;}),currentAccount=_useAppEOASelector.currentAccount;var _useAppEOASelector2=(0,_index.useAppEOASelector)(function(state){return state.chain;}),currentChain=_useAppEOASelector2.currentChain;var getTokenContract=(0,_react.useCallback)((0,_asyncToGenerator2.default)(function*(){if(!rpcUrl)return;var aelf=new _aelfSdk.default(new _aelfSdk.default.providers.HttpProvider(rpcUrl));return yield aelf.chain.contractAt(tokenAddress,wallet1);}),[tokenAddress,rpcUrl]);var onGetBalance=(0,_react.useCallback)((0,_asyncToGenerator2.default)(function*(){var tokensList=Array.isArray(tokens)?tokens.map(function(item){return item.symbol;}):[tokens.symbol];if(!(currentAccount!=null&&currentAccount.address))return setBalances(tokensList.map(function(){return bigNAN;}));var promise;if(currentChain.chainType==='aelf'){var tokenContract=yield getTokenContract();if(!tokenContract)return;promise=tokensList.map(function(symbol){if(symbol)return(0,_balance.getELFChainBalance)(tokenContract,symbol,currentAccount==null?void 0:currentAccount.address);});}else if(currentChain.chainType==='ethereum'){return;}else{throw Error('Not Support');}if(!promise)throw Error('Something error');var bs=yield Promise.all(promise);setBalances(bs==null?void 0:bs.map(function(i){return new _bignumber.default(i!=null?i:'');}));}),[]);(0,_useInterval.default)(onGetBalance,delay,[currentAccount,tokens]);return[balances,onGetBalance];};var _default=exports.default=useBalances;