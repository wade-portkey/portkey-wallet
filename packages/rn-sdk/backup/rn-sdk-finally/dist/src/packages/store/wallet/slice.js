Object.defineProperty(exports,"__esModule",{value:true});exports.walletSlice=void 0;var _toolkit=require("@reduxjs/toolkit");var _actions=require("./actions");var _wallet=require("../../utils/wallet");var _wallet2=require("../../constants/wallet");var _type=require("./type");var _utils=require("./utils");var _aelf=require("../../utils/aelf");var _utils2=require("../../utils");var initialState={nextBIP44Path:_wallet2.DefaultBIP44Path,walletType:'aelf'};var walletSlice=exports.walletSlice=(0,_toolkit.createSlice)({name:'wallet',initialState:initialState,reducers:{},extraReducers:function extraReducers(builder){builder.addCase(_actions.createWalletAction,function(state,action){var _accountInfo$BIP44Pat;var _action$payload=action.payload,walletInfo=_action$payload.walletInfo,accountInfo=_action$payload.accountInfo;state.walletInfo=walletInfo;state.accountList=[accountInfo];state.currentAccount=accountInfo;state.nextBIP44Path=(0,_wallet.getNextBIP44Path)((_accountInfo$BIP44Pat=accountInfo.BIP44Path)!=null?_accountInfo$BIP44Pat:'');}).addCase(_actions.setBackup,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload2=action.payload,password=_action$payload2.password,isBackup=_action$payload2.isBackup;(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);state.walletInfo.isBackup=isBackup;}).addCase(_actions.addAccount,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload3=action.payload,password=_action$payload3.password,accountName=_action$payload3.accountName;var walletNameMessage=(0,_wallet.checkAccountNameInput)(accountName);if(walletNameMessage)throw new Error(walletNameMessage);var walletInfo=(0,_utils.getAccountByWalletState)(state,password);(0,_utils.checkAccountExists)(state,walletInfo);var accountInfo=(0,_utils.createAccount)(walletInfo,password,accountName||"Account "+(state.accountList.length+1));state.accountList.push(accountInfo);state.nextBIP44Path=(0,_wallet.getNextBIP44Path)(state.nextBIP44Path);state.currentAccount=accountInfo;}).addCase(_actions.setCurrentAccount,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload4=action.payload,address=_action$payload4.address,password=_action$payload4.password;(0,_utils.checkAccountNotExistByState)(state.accountList,address);(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);state.currentAccount=state.accountList.find(function(account){return(0,_aelf.isEqAddress)(account.address,address);});}).addCase(_actions.resetWallet,function(){return initialState;}).addCase(_actions.importAccount,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload5=action.payload,password=_action$payload5.password,privateKey=_action$payload5.privateKey,accountName=_action$payload5.accountName;var pkey=(0,_utils.handlePrivateKey)(privateKey);if(!(0,_utils2.isPrivateKey)(pkey))throw new Error(_type.WalletError.invalidPrivateKey);(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);var walletInfo=(0,_wallet.getAccountByPrivateKey)(pkey);(0,_utils.checkAccountExists)(state,walletInfo);var accountInfo=(0,_utils.createAccount)(walletInfo,password,accountName||"Account "+(state.accountList.length+1),'Import');state.accountList.push(accountInfo);state.currentAccount=accountInfo;}).addCase(_actions.updateAccountName,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload6=action.payload,address=_action$payload6.address,accountName=_action$payload6.accountName,password=_action$payload6.password;var walletNameMessage=(0,_wallet.checkAccountNameInput)(accountName);if(walletNameMessage)throw new Error(walletNameMessage);(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);(0,_utils.checkAccountNotExistByState)(state.accountList,address);state.accountList=state.accountList.map(function(account){if((0,_aelf.isEqAddress)(account.address,address))return Object.assign({},account,{accountName:accountName});return account;});if(state.currentAccount&&(0,_aelf.isEqAddress)(state.currentAccount.address,address))state.currentAccount.accountName=accountName;}).addCase(_actions.removeAccount,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload7=action.payload,address=_action$payload7.address,password=_action$payload7.password;(0,_utils.checkAccountNotExistByState)(state.accountList,address);(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);var isRemoved=false;state.accountList=state.accountList.filter(function(item){if((0,_aelf.isEqAddress)(item.address,address)){isRemoved=item.accountType==='Import';return!isRemoved;}return true;});if(state.currentAccount&&(0,_aelf.isEqAddress)(state.currentAccount.address,address))state.currentAccount=state.accountList[0];if(!isRemoved)throw new Error(_type.WalletError.createdAccountNotDeleted);}).addCase(_actions.addAndReplaceAccount,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload8=action.payload,password=_action$payload8.password,accountName=_action$payload8.accountName;var walletInfo=(0,_utils.getAccountByWalletState)(state,password);if((0,_utils.checkAccount)(state.accountList,walletInfo.address)){state.accountList=state.accountList.filter(function(item){if((0,_aelf.isEqAddress)(item.address,walletInfo.address))return item.accountType!=='Import';return true;});}var accountInfo=(0,_utils.createAccount)(walletInfo,password,accountName||"Account "+(state.accountList.length+1));state.accountList.push(accountInfo);state.nextBIP44Path=(0,_wallet.getNextBIP44Path)(state.nextBIP44Path);state.currentAccount=accountInfo;}).addCase(_actions.changePassword,function(state,action){if(!state.walletInfo||!state.accountList)throw new Error(_type.WalletError.noCreateWallet);var _action$payload9=action.payload,password=_action$payload9.password,newPassword=_action$payload9.newPassword;var passwordMessage=(0,_wallet.checkPasswordInput)(password);if(passwordMessage)throw new Error(passwordMessage);(0,_utils.checkPasswordByStateMnemonic)(state.walletInfo.AESEncryptMnemonic,password);state.walletInfo.AESEncryptMnemonic=(0,_utils.changeEncryptStr)(state.walletInfo.AESEncryptMnemonic,password,newPassword);state.walletInfo.AESEncryptPrivateKey=(0,_utils.changeEncryptStr)(state.walletInfo.AESEncryptPrivateKey,password,newPassword);if(state.currentAccount)state.currentAccount.AESEncryptPrivateKey=(0,_utils.changeEncryptStr)(state.currentAccount.AESEncryptPrivateKey,password,newPassword);state.accountList=state.accountList.map(function(account){return Object.assign({},account,{AESEncryptPrivateKey:(0,_utils.changeEncryptStr)(account.AESEncryptPrivateKey,password,newPassword)});});});}});