var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slice=require("./slice");var _api=require("./api");var _toolkit=require("@reduxjs/toolkit");var _action=require("./action");var _apiDid=require("../../../api/api-did");jest.mock("./api");jest.mock("../../../api/api-did");var reducer=_slice.tokenManagementSlice.reducer;var mockInitState={tokenDataShowInMarket:[],isFetching:false,skipCount:0,maxResultCount:1000,totalRecordCount:0,symbolImages:{}};describe('resetToken',function(){test('Reset tokenDataShowInMarket successful',function(){var mockPrevState=Object.assign({},mockInitState,{tokenDataShowInMarket:[{chainId:'AELF',decimals:8,address:'0',symbol:'ELF',name:'name'}]});var newState=reducer(mockPrevState,(0,_slice.resetToken)());expect(newState.tokenDataShowInMarket).toEqual([]);});});describe('clearMarketToken',function(){test('Reset tokenDataShowInMarket successful',function(){var mockPrevState=Object.assign({},mockInitState,{tokenDataShowInMarket:[{chainId:'AELF',decimals:8,address:'0',symbol:'ELF',name:'name'}]});var newState=reducer(mockPrevState,(0,_slice.clearMarketToken)());expect(newState.tokenDataShowInMarket).toEqual([]);});});describe('fetchAllTokenListAsync',function(){test('Fetch allTokenList successful, will update tokenDataShowInMarket',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchAllTokenList).mockResolvedValue({items:[{isDisplay:true,isDefault:true,id:'id',token:{chainId:'AELF',decimals:8,address:'address',symbol:'ELF',id:'tokenId'}}],totalRecordCount:0});var mockParams={keyword:'',chainIdArray:[]};var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:mockInitState});yield mockStore.dispatch((0,_action.fetchAllTokenListAsync)(mockParams));expect(mockStore.getState().tokenDataShowInMarket).toHaveLength(1);}));test('Fetch allTokenList failed, will throw error',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchAllTokenList).mockRejectedValue({message:'error'});var mockParams={keyword:'',chainIdArray:[]};var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:mockInitState});var res=yield mockStore.dispatch((0,_action.fetchAllTokenListAsync)(mockParams));expect(res.type).toEqual('tokenManagement/fetchAllTokenListAsync/rejected');}));});describe('getSymbolImagesAsync',function(){var mockStore=(0,_toolkit.configureStore)({reducer:reducer});test('Get symbolImages successful, will update symbolImages',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_apiDid.request.assets.getSymbolImages).mockResolvedValue({symbolImages:{ELF:'https://aelf.io/favicon.ico'}});yield mockStore.dispatch((0,_action.getSymbolImagesAsync)());expect(mockStore.getState().symbolImages).toHaveProperty('ELF');}));test('Get symbolImages failed, will throw error',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_apiDid.request.assets.getSymbolImages).mockRejectedValue({message:'error'});var res=yield mockStore.dispatch((0,_action.getSymbolImagesAsync)());expect(res.type).toEqual('tokenManagement/getSymbolImagesAsync/rejected');}));});