var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _toConsumableArray2=_interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slice=require("./slice");var utils=_interopRequireWildcard(require("./utils"));var _toolkit=require("@reduxjs/toolkit");var _actions=require("./actions");var _utils2=require("../../../api/api-did/es/utils");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}var reducer=_slice.contactSlice.reducer;jest.mock("../../../api/api-did/es/utils");beforeEach(function(){jest.restoreAllMocks();});describe('fetchContactListAsync',function(){beforeEach(function(){jest.restoreAllMocks();});var mockInitState={wallet:{currentNetwork:'TESTNET'},contact:{lastModified:0,contactIndexList:utils.getInitContactIndexList(),contactMap:{}}};var mockStore=(0,_toolkit.configureStore)({reducer:{contact:reducer,wallet:reducer},preloadedState:mockInitState});test('At the first time, to get contactList successful',(0,_asyncToGenerator2.default)(function*(){var mockFetchedContacts={totalCount:1,items:[{id:'A',index:'A',name:'Aa',addresses:[{chainId:'AELF',address:'addressA'}],modificationTime:123,isDeleted:false,userId:'A'}]};jest.mocked(_utils2.getContactList).mockResolvedValue(mockFetchedContacts);yield mockStore.dispatch((0,_actions.fetchContactListAsync)(true));var newState=mockStore.getState();expect(newState.contact.contactIndexList[0].contacts).toEqual(mockFetchedContacts.items);}));test('To get contactList, return empty array, will throw Error',(0,_asyncToGenerator2.default)(function*(){var mockFetchedContacts={totalCount:0,items:[]};jest.mocked(_utils2.getContactList).mockResolvedValue(mockFetchedContacts);var res=yield mockStore.dispatch((0,_actions.fetchContactListAsync)(true));expect(res.type).toBe('contact/fetchContactListAsync/rejected');}));test('Multiply get contactList, will update contactIndexList',(0,_asyncToGenerator2.default)(function*(){var mockFetchedContacts={totalCount:1,items:[{id:'B',index:'B',name:'Bb',addresses:[{chainId:'AELF',address:'addressB'}],modificationTime:123,isDeleted:false,userId:'B'}]};jest.mocked(_utils2.getContactEventList).mockResolvedValue(mockFetchedContacts);yield mockStore.dispatch((0,_actions.fetchContactListAsync)());var newState=mockStore.getState();expect(newState.contact.contactIndexList[1].contacts).toEqual(mockFetchedContacts.items);}));test('Get contactList, sortContactIndexList return empty array',(0,_asyncToGenerator2.default)(function*(){var mockFetchedContacts={totalCount:0,items:[{id:'A',index:'A',name:'Aa',addresses:[{chainId:'AELF',address:'addressA'}],modificationTime:123,isDeleted:false,userId:'A'}]};jest.spyOn(utils,'sortContactIndexList').mockReturnValue([]);jest.mocked(_utils2.getContactList).mockResolvedValue(mockFetchedContacts);yield mockStore.dispatch((0,_actions.fetchContactListAsync)(true));var newState=mockStore.getState();expect(newState.contact.contactIndexList).toEqual(utils.getInitContactIndexList());}));});describe('addContactAction',function(){beforeEach(function(){jest.restoreAllMocks();});var mockContact={id:'A',index:'A',name:'Aa',addresses:[{chainId:'AELF',address:'addressA'}],modificationTime:123,isDeleted:false,userId:'A'};test('The state is empty, will add a new contact',function(){var res=reducer({contactIndexList:utils.getInitContactIndexList(),contactMap:{},lastModified:0},(0,_actions.addContactAction)(mockContact));expect(res.contactIndexList[0].contacts).toEqual([mockContact]);});});describe('editContactAction',function(){beforeEach(function(){jest.restoreAllMocks();});var mockContact={id:'A',index:'A',name:'Aa',addresses:[{chainId:'AELF',address:'addressA'}],modificationTime:123,isDeleted:false,userId:'A'};test('The contact is exist, will edit it',function(){var initContact=utils.getInitContactIndexList();initContact.shift();var res=reducer({contactIndexList:[{index:'A',contacts:[mockContact]}].concat((0,_toConsumableArray2.default)(initContact)),contactMap:{},lastModified:0},(0,_actions.editContactAction)(Object.assign({},mockContact,{name:'AA'})));expect(res.contactIndexList[0].contacts).toEqual([Object.assign({},mockContact,{name:'AA'})]);});test('The contact is exist, modificationTime is lasted, will don not edit it',function(){var initContact=utils.getInitContactIndexList();initContact.shift();var res=reducer({contactIndexList:[{index:'A',contacts:[mockContact]}].concat((0,_toConsumableArray2.default)(initContact)),contactMap:{},lastModified:0},(0,_actions.editContactAction)(Object.assign({},mockContact,{name:'AA',modificationTime:1})));expect(res.contactIndexList[0].contacts).toEqual([mockContact]);});test('The contact is exist, but index not match, will add new a contact',function(){var initContact=utils.getInitContactIndexList();initContact.shift();var res=reducer({contactIndexList:[{index:'A',contacts:[mockContact]}].concat((0,_toConsumableArray2.default)(initContact)),contactMap:{},lastModified:0},(0,_actions.editContactAction)(Object.assign({},mockContact,{name:'AA',index:'B'})));expect(res.contactIndexList[1].contacts).toEqual([Object.assign({},mockContact,{name:'AA',index:'B'})]);});});describe('deleteContactAction',function(){beforeEach(function(){jest.restoreAllMocks();});var mockContact={id:'A',index:'A',name:'Aa',addresses:[{chainId:'AELF',address:'addressA'}],modificationTime:123,isDeleted:true,userId:'A'};test('The contact is exist, will edit it',function(){var initContact=utils.getInitContactIndexList();initContact.shift();var res=reducer({contactIndexList:[{index:'A',contacts:[mockContact]}].concat((0,_toConsumableArray2.default)(initContact)),contactMap:{},lastModified:0},(0,_actions.deleteContactAction)(mockContact));expect(res.contactIndexList[0].contacts).toEqual([]);});});describe('resetContact',function(){beforeEach(function(){jest.restoreAllMocks();});test('reset contact',function(){var mockInitState={lastModified:0,contactIndexList:utils.getInitContactIndexList(),contactMap:{}};var res=reducer(mockInitState,(0,_actions.resetContact)());expect(res.contactMap).toEqual({});expect(res.lastModified).toBe(0);});});