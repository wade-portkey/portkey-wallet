var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _slice=require("./slice");var _api=require("./api");var _activity=require("../../../utils/activity");var _action=require("./action");var _toolkit=require("@reduxjs/toolkit");var reducer=_slice.activitySlice.reducer;var mockInitState={activityMap:{},isFetchingActivities:false,failedActivityMap:{},isLoading:false};jest.mock("./api");jest.mock("../../../utils/activity");describe('addFailedActivity',function(){test('Prev failedActivityMap is empty, add a failedActivity',function(){var mockPayload={transactionId:'0x1234567890',params:{chainType:'aelf',managerAddress:'mangerAddress',tokenInfo:{id:'id',chainId:'AELF',decimals:8,address:'address',symbol:'ELF',name:'name'},amount:0,toAddress:'toAddress'}};var res=reducer(mockInitState,(0,_slice.addFailedActivity)(mockPayload));expect(res.failedActivityMap[mockPayload.transactionId]).toEqual(mockPayload);});});describe('removeFailedActivity',function(){var mockState={activityMap:{},isFetchingActivities:false,failedActivityMap:{'0x1234567890':{transactionId:'0x1234567890',params:{chainType:'aelf',managerAddress:'mangerAddress',tokenInfo:{id:'id',chainId:'AELF',decimals:8,address:'address',symbol:'ELF',name:'name'},amount:0,toAddress:'toAddress'}}},isLoading:false};test('The key is not exist',function(){var mockState={activityMap:{},isFetchingActivities:false,failedActivityMap:{'0x1234567890':{transactionId:'0x1234567890',params:{chainType:'aelf',managerAddress:'mangerAddress',tokenInfo:{id:'id',chainId:'AELF',decimals:8,address:'address',symbol:'ELF',name:'name'},amount:0,toAddress:'toAddress'}}},isLoading:false};var res=reducer(mockState,(0,_slice.removeFailedActivity)('0x1'));expect(res.failedActivityMap).toHaveProperty('0x1234567890');});test('The key exist, will remove successful',function(){var res=reducer(mockState,(0,_slice.removeFailedActivity)('0x1234567890'));expect(res.failedActivityMap).not.toHaveProperty('0x1234567890');});});describe('resetActivity',function(){var mockPrevState={activityMap:{},isFetchingActivities:false,failedActivityMap:{'0x1234567890':{transactionId:'0x1234567890',params:{chainType:'aelf',managerAddress:'mangerAddress',tokenInfo:{id:'id',chainId:'AELF',decimals:8,address:'address',symbol:'ELF',name:'name'},amount:0,toAddress:'toAddress'}}},isLoading:false};test('Reset activity',function(){var res=reducer(mockPrevState,(0,_slice.resetActivity)());expect(res).toEqual(mockInitState);});});describe('activitySlice',function(){var mockPrevState={isFetchingActivities:false,failedActivityMap:{},isLoading:false};var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:mockPrevState});test('ActivityMap is empty, fetch and update activityMap',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchActivities).mockResolvedValue({data:[{chainId:'AELF',transactionType:'SocialRecovery',transactionName:'Social Recovery',from:'wallet01',to:'wallet02',fromAddress:'fromAddress',toAddress:'toAddress',fromChainId:'AELF',toChainId:'AELF',status:'',transactionId:'',blockHash:'blockHash',timestamp:'',isReceived:true,amount:'1',symbol:'',transactionFees:[{symbol:'ELF',fee:87385000,feeInUsd:'0.256879427979178',decimals:'8'}]}],totalRecordCount:1});jest.mocked(_activity.getCurrentActivityMapKey).mockReturnValue('AELF_ELF');var mockPayload={maxResultCount:1000,skipCount:0};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();expect(_activity.getCurrentActivityMapKey).toBeCalled();var res=mockStore.getState().activityMap;expect(res).toHaveProperty('AELF_ELF');}));test('ActivityMap is empty, fetch failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchActivities).mockRejectedValue({code:500,errMsg:'Service Error'});var mockPayload={maxResultCount:1000,skipCount:0};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();}));test('ActivityMap is empty, fetch failed, return error.type',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchActivities).mockRejectedValue({type:'Service Error'});var mockPayload={maxResultCount:1000,skipCount:0};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();}));test('ActivityMap is empty, fetch failed, return error.error.type',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchActivities).mockRejectedValue({error:{message:'Service Error'}});var mockPayload={maxResultCount:1000,skipCount:0};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();}));test('ActivityMap is empty, fetch successful, return no data',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchActivities).mockResolvedValue({data:[],totalRecordCount:0});var mockPayload={maxResultCount:1000,skipCount:0};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();}));test('ActivityMap exist, fetch and will add a new activityItem',(0,_asyncToGenerator2.default)(function*(){var mockPrevState={activityMap:{AELF_ELF:{maxResultCount:10,skipCount:1,data:[{chainId:'AELF',transactionType:'SocialRecovery',transactionName:'Social Recovery',from:'wallet01',to:'wallet02',fromAddress:'fromAddress',toAddress:'toAddress',fromChainId:'AELF',toChainId:'AELF',status:'MINED',transactionId:'',blockHash:'blockHash',timestamp:'1682323412',isReceived:true,amount:'1',symbol:'ELF',transactionFees:[{symbol:'ELF',fee:87385000,feeInUsd:'0.256879427979178',decimals:'8'}]}],totalRecordCount:100,chainId:'AELF',symbol:'ELF'}},isFetchingActivities:false,failedActivityMap:{},isLoading:false};var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:mockPrevState});jest.mocked(_api.fetchActivities).mockResolvedValue({data:[{chainId:'AELF',transactionType:'SocialRecovery',transactionName:'Social Recovery',from:'wallet01',to:'wallet02',fromAddress:'fromAddress',toAddress:'toAddress',fromChainId:'AELF',toChainId:'AELF',status:'',transactionId:'',blockHash:'blockHash',timestamp:'',isReceived:true,amount:'1',symbol:'',transactionFees:[{symbol:'ELF',fee:87385000,feeInUsd:'0.256879427979178',decimals:'8'}]}],totalRecordCount:1});jest.mocked(_activity.getCurrentActivityMapKey).mockReturnValue('AELF_ELF');var mockPayload={maxResultCount:10,skipCount:1};yield mockStore.dispatch((0,_action.getActivityListAsync)(mockPayload));expect(_api.fetchActivities).toBeCalled();expect(_activity.getCurrentActivityMapKey).toBeCalled();var res=mockStore.getState().activityMap;expect(res['AELF_ELF'].data).toHaveLength(2);}));});