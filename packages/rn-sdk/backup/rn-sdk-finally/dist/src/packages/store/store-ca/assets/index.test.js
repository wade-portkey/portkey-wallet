var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _assets=require("../../../constants/constants-ca/assets");var _slice=require("./slice");var _toolkit=require("@reduxjs/toolkit");var _api=require("./api");var mockInitState={accountToken:{isFetching:false,skipCount:0,maxResultCount:10,accountTokenList:_assets.NEW_CLIENT_MOCK_ELF_LIST,totalRecordCount:0},accountNFT:{isFetching:false,skipCount:0,maxResultCount:10,accountNFTList:[],totalRecordCount:0},accountAssets:{isFetching:false,skipCount:0,maxResultCount:1000,accountAssetsList:[],totalRecordCount:0},tokenPrices:{isFetching:false,tokenPriceObject:{}},accountBalance:0};var reducer=_slice.assetsSlice.reducer;jest.mock("./api");describe('resetAssets',function(){test('reset assets, will equal initState',function(){var res=reducer(mockInitState,(0,_slice.resetAssets)());expect(res).toEqual(mockInitState);});});describe('clearNftItem',function(){var newState=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:1,maxResultCount:9,totalRecordCount:1,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[{alias:'Forest Warrior',quantity:'1',chainId:'AELF',imageUrl:'https:/294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'aZSvoAaE',tokenId:'001',totalSupply:''}]}]})});test('symbol and chainId have exist, will clear nftItem',function(){var res=reducer(newState,_slice.assetsSlice.actions.clearNftItem({symbol:'CARD-0',chainId:'AELF'}));expect(res.accountNFT.accountNFTList[0].children).toEqual([]);});test('symbol and chainId have not exist, nft item exist',function(){var res=reducer(newState,_slice.assetsSlice.actions.clearNftItem({symbol:'CARD-1',chainId:'AELF'}));expect(res.accountNFT.accountNFTList[0].children).toHaveLength(1);});});describe('clearNftCollection',function(){test('nft collection will reset',function(){var newState=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:1,maxResultCount:9,totalRecordCount:1,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[{alias:'Forest Warrior',quantity:'1',chainId:'AELF',imageUrl:'https:/294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'aZSvoAaE',tokenId:'001',totalSupply:''}]}]})});var res=reducer(newState,(0,_slice.clearNftCollection)());expect(res.accountNFT).toEqual(mockInitState.accountNFT);});});describe('fetchTokenListAsync',function(){var mockStore=(0,_toolkit.configureStore)({reducer:reducer});var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}]};test('fetchTokenListAsync will return accountToken successful',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchTokenList).mockResolvedValue({data:[{balance:'3092810000',balanceInUsd:undefined,chainId:'AELF',decimals:8,imageUrl:'https://aelf_token_logo.png',price:0.291849,symbol:'ELF',tokenContractAddress:'7W99faZSvoAaE'}],totalRecordCount:1});yield mockStore.dispatch((0,_slice.fetchTokenListAsync)(mockPayload));expect(mockStore.getState().accountToken.accountTokenList).toHaveLength(1);}));test('fetchTokenListAsync return empty, accountToken will be set initState',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchTokenList).mockResolvedValue({data:[],totalRecordCount:0});yield mockStore.dispatch((0,_slice.fetchTokenListAsync)(mockPayload));expect(mockStore.getState().accountToken.accountTokenList).toEqual(_assets.NEW_CLIENT_MOCK_ELF_LIST);}));test('fetchTokenListAsync failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchTokenList).mockRejectedValue({error:'error'});var res=yield mockStore.dispatch((0,_slice.fetchTokenListAsync)(mockPayload));expect(res.type).toEqual('fetchTokenListAsync/rejected');}));});describe('fetchNFTCollectionsAsync',function(){var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:mockInitState}});var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}]};test('fetchNFTCollectionsAsync will return accountNFT successful',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchNFTSeriesList).mockResolvedValue({data:[{chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https://144xAUTO/3.jpg',itemCount:1,symbol:'CARD-0'}],totalRecordCount:1});yield mockStore.dispatch((0,_slice.fetchNFTCollectionsAsync)(mockPayload));expect(mockStore.getState().assets.accountNFT.accountNFTList).toHaveLength(1);}));test('fetchNFTCollectionsAsync failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchNFTSeriesList).mockRejectedValue({error:'error'});var res=yield mockStore.dispatch((0,_slice.fetchNFTCollectionsAsync)(mockPayload));expect(res.type).toEqual('fetchNFTCollectionsAsync/rejected');}));});describe('fetchNFTAsync',function(){var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}],symbol:'CARD-0',chainId:'AELF',pageNum:0};var mockReturnNftItem={alias:'Forest Warrior',balance:'1',chainId:'AELF',imageLargeUrl:'https://1008xAUTO/1.jpg',imageUrl:'https://294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'7W99faZSvoAaE',tokenId:'001',totalSupply:''};var newState=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:1,maxResultCount:9,totalRecordCount:1,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[]}]})});test('fetchNFTAsync will return nft item successful and nft collection exist',(0,_asyncToGenerator2.default)(function*(){var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:newState}});jest.mocked(_api.fetchNFTList).mockResolvedValue({data:[mockReturnNftItem],totalRecordCount:1});yield mockStore.dispatch((0,_slice.fetchNFTAsync)(mockPayload));expect(mockStore.getState().assets.accountNFT.accountNFTList[0].children).toHaveLength(1);}));test('fetchNFTAsync will return nft item successful and nft collection does not exist',(0,_asyncToGenerator2.default)(function*(){var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:newState}});jest.mocked(_api.fetchNFTList).mockResolvedValue({data:[mockReturnNftItem],totalRecordCount:1});yield mockStore.dispatch((0,_slice.fetchNFTAsync)(Object.assign({},mockPayload,{symbol:'CARD-1',chainId:'tDVV'})));expect(mockStore.getState().assets.accountNFT.accountNFTList[0].children).toHaveLength(0);}));test('repeated fetch multiple times will update once',(0,_asyncToGenerator2.default)(function*(){var state=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:0,maxResultCount:2,totalRecordCount:1,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[{alias:'Forest Warrior',quantity:'1',chainId:'AELF',imageLargeUrl:'https://1008xAUTO/1.jpg',imageUrl:'https://294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'7W99faZSvoAaE',tokenId:'001',totalSupply:''},{alias:'Forest',quantity:'1',chainId:'AELF',imageLargeUrl:'https://1008xAUTO/1.jpg',imageUrl:'https://294xAUTO/1.jpg',symbol:'CARD-002',tokenContractAddress:'7W99faZSvoAaE',tokenId:'002',totalSupply:''}]}]})});jest.mocked(_api.fetchNFTList).mockResolvedValue({data:[mockReturnNftItem],totalRecordCount:1});var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:state}});yield mockStore.dispatch((0,_slice.fetchNFTAsync)(Object.assign({},mockPayload,{pageNum:2})));expect(mockStore.getState().assets.accountNFT.accountNFTList[0].children).toHaveLength(2);}));test('enough nft items so will not to fetch new nft items',(0,_asyncToGenerator2.default)(function*(){var state=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:1,maxResultCount:1,totalRecordCount:10,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[{alias:'Forest Warrior',quantity:'1',chainId:'AELF',imageLargeUrl:'https://1008xAUTO/1.jpg',imageUrl:'https://294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'7W99faZSvoAaE',tokenId:'001',totalSupply:''}]}]})});var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:state}});var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}],symbol:'CARD-0',chainId:'AELF',pageNum:0};yield mockStore.dispatch((0,_slice.fetchNFTAsync)(mockPayload));expect(mockStore.getState().assets.accountNFT.accountNFTList[0].children).toHaveLength(1);}));test('have got it all, does not need to get it again',(0,_asyncToGenerator2.default)(function*(){var state=Object.assign({},mockInitState,{accountNFT:Object.assign({},mockInitState.accountNFT,{accountNFTList:[{isFetching:false,skipCount:1,maxResultCount:2,totalRecordCount:1,chainId:'AELF',collectionName:'Nature Elves',imageUrl:'https:/294xAUTO/1.jpg',itemCount:1,symbol:'CARD-0',decimals:0,children:[{alias:'Forest Warrior',quantity:'1',chainId:'AELF',imageLargeUrl:'https://1008xAUTO/1.jpg',imageUrl:'https://294xAUTO/1.jpg',symbol:'CARD-001',tokenContractAddress:'7W99faZSvoAaE',tokenId:'001',totalSupply:''}]}]})});var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:state}});var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}],symbol:'CARD-0',chainId:'AELF'};yield mockStore.dispatch((0,_slice.fetchNFTAsync)(mockPayload));expect(mockStore.getState().assets.accountNFT.accountNFTList[0].children).toHaveLength(1);}));test('fetchNFTAsync failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchNFTList).mockRejectedValue({error:'error'});var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:newState}});var res=yield mockStore.dispatch((0,_slice.fetchNFTAsync)(mockPayload));expect(res.type).toEqual('fetchNFTAsync/rejected');}));});describe('fetchAssetsAsync',function(){var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:mockInitState});var mockPayload={caAddresses:['7W99faZSvoAaE'],caAddressInfos:[{caAddress:'7W99faZSvoAaE',chainId:'AELF'}],keyword:''};var mockReturnValue={data:[{id:'uniqueId',address:'YsB44wJetP29zHRTx9J',chainId:'AELF',nftInfo:undefined,symbol:'ELF',tokenInfo:{chainId:'AELF',balance:'3092810000',decimals:'8',balanceInUsd:'9.0899850867',tokenContractAddress:'f7W99faZSvoAaE'}}],totalRecordCount:0};test('fetchAssetsAsync will return assets successful',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchAssetList).mockResolvedValue(mockReturnValue);yield mockStore.dispatch((0,_slice.fetchAssetAsync)(mockPayload));expect(mockStore.getState().accountAssets.accountAssetsList).toHaveLength(1);}));test('fetchAssetsAsync will return assets failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchAssetList).mockRejectedValue({error:'error'});var res=yield mockStore.dispatch((0,_slice.fetchAssetAsync)(mockPayload));expect(res.type).toEqual('fetchAssetsAsync/rejected');}));});describe('fetchTokensPriceAsync',function(){var mockStore=(0,_toolkit.configureStore)({reducer:{assets:_slice.assetsSlice.reducer},preloadedState:{assets:mockInitState}});test('fetchTokensPriceAsync will return tokens price successful',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchTokenPrices).mockResolvedValue({items:[{symbol:'ELF',priceInUsd:0.293907}],totalRecordCount:1});yield mockStore.dispatch((0,_slice.fetchTokensPriceAsync)({symbols:undefined}));expect(mockStore.getState().assets.tokenPrices.tokenPriceObject).toEqual({ELF:0.293907});}));test('fetchTokensPriceAsync failed',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_api.fetchTokenPrices).mockRejectedValue({error:'error'});var res=yield mockStore.dispatch((0,_slice.fetchTokensPriceAsync)({symbols:['ELF']}));expect(res.type).toEqual('fetchTokensPriceAsync/rejected');}));});