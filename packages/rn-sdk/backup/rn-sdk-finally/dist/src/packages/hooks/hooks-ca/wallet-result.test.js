var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _react=require("@testing-library/react");var _walletResult=require("./wallet-result");var _socketDid=_interopRequireDefault(require("../../socket/socket-did"));var walletUtils=_interopRequireWildcard(require("../../api/api-did/utils/wallet"));var _network=require("./network");var _verifier=require("../../types/verifier");function _getRequireWildcardCache(e){if("function"!=typeof WeakMap)return null;var r=new WeakMap(),t=new WeakMap();return(_getRequireWildcardCache=function _getRequireWildcardCache(e){return e?t:r;})(e);}function _interopRequireWildcard(e,r){if(!r&&e&&e.__esModule)return e;if(null===e||"object"!=typeof e&&"function"!=typeof e)return{default:e};var t=_getRequireWildcardCache(r);if(t&&t.has(e))return t.get(e);var n={__proto__:null},a=Object.defineProperty&&Object.getOwnPropertyDescriptor;for(var u in e)if("default"!==u&&Object.prototype.hasOwnProperty.call(e,u)){var i=a?Object.getOwnPropertyDescriptor(e,u):null;i&&(i.get||i.set)?Object.defineProperty(n,u,i):n[u]=e[u];}return n.default=e,t&&t.set(e,n),n;}jest.mock("../../socket/socket-did");jest.mock("../../utils");jest.mock("./network");describe('useFetchWalletCAAddress',function(){test('register success',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_network.useCurrentApiUrl).mockReturnValue('https://localhost/chain');var remove=function remove(){return jest.fn();};jest.spyOn(_socketDid.default,'onCaAccountRegister').mockImplementation(function(_obj,callback){callback({body:{registerStatus:'pass',registerMessage:'',caAddress:'',caHash:''},requestId:''});return{remove:remove};});jest.spyOn(walletUtils,'requestCreateWallet').mockReturnValueOnce(Promise.resolve({registerStatus:'pending'})).mockReturnValue(Promise.resolve({registerStatus:'success'}));var _renderHook=(0,_react.renderHook)(function(){return(0,_walletResult.useFetchWalletCAAddress)();}),result=_renderHook.result;var walletResult=yield result.current({clientId:'AELF',requestId:'',verificationType:_verifier.VerificationType.register,managerUniqueId:''});expect(result.current).toBeEnabled;expect(walletResult.status).toBe('pass');}));test('registerStatus type is not string',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_network.useCurrentApiUrl).mockReturnValue('https://localhost/chain');var remove=function remove(){return jest.fn();};jest.spyOn(_socketDid.default,'onCaAccountRegister').mockImplementation(function(_obj,callback){callback({body:{registerStatus:0,registerMessage:'',caAddress:'',caHash:''},requestId:''});return{remove:remove};});jest.spyOn(walletUtils,'requestCreateWallet').mockReturnValueOnce(Promise.resolve({registerStatus:'pending'})).mockReturnValue(Promise.resolve({registerStatus:'success'}));var _renderHook2=(0,_react.renderHook)(function(){return(0,_walletResult.useFetchWalletCAAddress)();}),result=_renderHook2.result;var walletResult=yield result.current({clientId:'AELF',requestId:'',verificationType:_verifier.VerificationType.register,managerUniqueId:''});expect(result.current).toBeEnabled;expect(walletResult.status).toBe('success');}));test('recovery success',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_network.useCurrentApiUrl).mockReturnValue('https://localhost/chain');var remove=function remove(){return jest.fn();};jest.spyOn(_socketDid.default,'onCaAccountRegister').mockReturnValue({remove:remove});jest.spyOn(_socketDid.default,'onCaAccountRecover').mockImplementation(function(_obj,callback){callback({body:{recoveryStatus:'pass',recoveryMessage:'',caAddress:'',caHash:''},requestId:''});return{remove:remove};});jest.spyOn(walletUtils,'requestCreateWallet').mockReturnValue(Promise.resolve({recoveryStatus:'success'}));var _renderHook3=(0,_react.renderHook)(function(){return(0,_walletResult.useFetchWalletCAAddress)();}),result=_renderHook3.result;var walletResult=yield result.current({clientId:'AELF',requestId:'',verificationType:_verifier.VerificationType.communityRecovery,managerUniqueId:''});expect(result.current).toBeEnabled;expect(walletResult.status).toBe('pass');}));});