var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.useUnlockedWallet=exports.getUnlockedWallet=void 0;var _slicedToArray2=_interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _constants=require("../../global/constants");var _useEffectOnce=_interopRequireDefault(require("../../hooks/useEffectOnce"));var _handler=require("../contract/handler");var _global=require("../global");var _core=require("../verify/core");var _controller=require("../../network/controller");var _react=require("react");var _cache=require("../../service/storage/cache");var getUnlockedWallet=exports.getUnlockedWallet=function(){var _ref=(0,_asyncToGenerator2.default)(function*(){var _ref2=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DefaultConfig,getMultiCaAddresses=_ref2.getMultiCaAddresses;if(!(yield(0,_core.isWalletUnlocked)()))throw new Error('wallet is not unlocked');var _ref3=(yield(0,_core.getTempWalletConfig)())||{},sessionId=_ref3.sessionId,accountIdentifier=_ref3.accountIdentifier,fromRecovery=_ref3.fromRecovery,_ref3$originalChainId=_ref3.originalChainId,originalChainId=_ref3$originalChainId===void 0?'AELF':_ref3$originalChainId,privateKey=_ref3.privateKey,publicKey=_ref3.publicKey,address=_ref3.address,originalCaInfo=_ref3.caInfo;var checkedOriginalChainId=originalChainId;if(accountIdentifier){var _chainInfo$result;var chainInfo=yield _controller.NetworkController.getRegisterResult(accountIdentifier);checkedOriginalChainId=((_chainInfo$result=chainInfo.result)==null?void 0:_chainInfo$result.originChainId)||originalChainId;}var endPointUrl=yield _constants.PortkeyConfig.endPointUrl();(0,_constants.setCurrChainId)(checkedOriginalChainId);_constants.PortkeyConfig;var caInfo=originalCaInfo!=null?originalCaInfo:yield(0,_global.getCaInfoByAccountIdentifierOrSessionId)(originalChainId,accountIdentifier,fromRecovery,sessionId);if(!caInfo)throw new Error('caInfo is not exist');var multiCaAddresses={};multiCaAddresses[originalChainId]=caInfo.caAddress;if(getMultiCaAddresses){multiCaAddresses=yield getCachedCaAddress(endPointUrl,caInfo,originalChainId);}return{caInfo:caInfo,originChainId:checkedOriginalChainId,privateKey:privateKey,publicKey:publicKey,address:address,multiCaAddresses:multiCaAddresses,name:'Wallet 01'};});return function getUnlockedWallet(){return _ref.apply(this,arguments);};}();var getCachedCaAddress=function(){var _ref4=(0,_asyncToGenerator2.default)(function*(endPoint,originalCaInfo,originalChainId){return(0,_cache.handleCachedValue)({getIdentifier:function(){var _getIdentifier=(0,_asyncToGenerator2.default)(function*(){var caHash=originalCaInfo.caHash;return caHash+"_"+endPoint;});function getIdentifier(){return _getIdentifier.apply(this,arguments);}return getIdentifier;}(),getValueIfNonExist:function(){var _getValueIfNonExist=(0,_asyncToGenerator2.default)(function*(){var _yield$NetworkControl=yield _controller.NetworkController.getNetworkInfo(),items=_yield$NetworkControl.items;var multiCaAddresses={};multiCaAddresses[originalChainId]=originalCaInfo.caAddress;for(var item of items){if(item.chainId===originalChainId)continue;var res=yield(0,_handler.callGetHolderInfoMethod)(originalCaInfo.caHash,item.caContractAddress,item.endPoint);if(res!=null&&res.error){console.log('getMultiCaAddresses error, chain: ',item.chainId,'res: ',res==null?void 0:res.error);continue;}else{var _res$data;console.log('getMultiCaAddresses success, chain: ',item.chainId,'res: ',res==null?void 0:res.data);multiCaAddresses[item.chainId]=res==null?void 0:(_res$data=res.data)==null?void 0:_res$data.caAddress;}}return multiCaAddresses;});function getValueIfNonExist(){return _getValueIfNonExist.apply(this,arguments);}return getValueIfNonExist;}(),target:'PERMANENT'});});return function getCachedCaAddress(_x,_x2,_x3){return _ref4.apply(this,arguments);};}();var useUnlockedWallet=exports.useUnlockedWallet=function useUnlockedWallet(){var config=arguments.length>0&&arguments[0]!==undefined?arguments[0]:DefaultConfig;var _useState=(0,_react.useState)(),_useState2=(0,_slicedToArray2.default)(_useState,2),wallet=_useState2[0],setWallet=_useState2[1];(0,_useEffectOnce.default)((0,_asyncToGenerator2.default)(function*(){var tempWallet=yield getUnlockedWallet(config);setWallet(tempWallet);}));return{wallet:wallet};};var DefaultConfig={getMultiCaAddresses:false};