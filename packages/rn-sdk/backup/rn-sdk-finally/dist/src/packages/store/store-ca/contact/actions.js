var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");Object.defineProperty(exports,"__esModule",{value:true});exports.resetContact=exports.refreshContactMap=exports.readImputationAction=exports.fetchContactListAsync=exports.editContactAction=exports.deleteContactAction=exports.addContactAction=void 0;var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _toolkit=require("@reduxjs/toolkit");var _contact=require("../../../constants/constants-ca/contact");var _utils=require("./utils");var _network=require("../../../constants/constants-ca/network");var _utils2=require("../../../api/api-did/es/utils");var fetchContactListAsync=exports.fetchContactListAsync=(0,_toolkit.createAsyncThunk)('contact/fetchContactListAsync',(0,_asyncToGenerator2.default)(function*(){var _NetworkList$find;var isInit=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;var thunkAPI=arguments.length>1?arguments[1]:undefined;var _ref2=thunkAPI.getState(),contactState=_ref2.contact,currentNetwork=_ref2.wallet.currentNetwork;var baseUrl=(_NetworkList$find=_network.NetworkList.find(function(item){return item.networkType===currentNetwork;}))==null?void 0:_NetworkList$find.apiUrl;if(!baseUrl)return{isInit:true,contactIndexList:[],isImputation:false,lastModified:0};var contactList=[];if(isInit||contactState.lastModified===0){var _page=1,_errorTimes=0,_totalCount=0,_isImputation=false;var modificationTime=Date.now();while(_page===1||contactList.length<_totalCount){try{console.log('getContactList',_page,_errorTimes);var response=yield(0,_utils2.getContactList)(baseUrl,{page:_page,size:_contact.CONTACT_API_FETCH_SIZE,modificationTime:new Date(modificationTime).toISOString()});console.log('getContactList: response',response);response.items.forEach(function(item){return item.modificationTime=new Date(item.modificationTime).getTime();});contactList=contactList.concat(response.items);_isImputation=contactList.some(function(item){return item.isImputation;});_totalCount=response.totalCount;_errorTimes=0;_page++;}catch(err){_errorTimes++;console.log('getContactList: error',_errorTimes);if(_errorTimes>=_contact.CONTACT_API_RETRY_LIMIT){throw new Error("getContactList errorTimes too many "+err);}}}if(contactList.length===0){throw new Error('getContactList no data');}return{isInit:true,contactIndexList:(0,_utils.transContactsToIndexes)(contactList),isImputation:_isImputation,lastModified:modificationTime};}var eventList=[];var page=1,errorTimes=0,totalCount=0,isImputation=false;var lastModified=contactState.lastModified;var fetchTime=Date.now();while(page===1||eventList.length<totalCount){try{console.log('getContactEventList',page,errorTimes);var _response=yield(0,_utils2.getContactEventList)(baseUrl,{modificationTime:new Date(lastModified).toISOString(),fetchTime:new Date(fetchTime).toISOString(),page:page,size:_contact.CONTACT_API_FETCH_SIZE});console.log('getContactEventList: response',_response);_response.items.forEach(function(item){return item.modificationTime=new Date(item.modificationTime).getTime();});eventList=eventList.concat(_response.items);isImputation=eventList.some(function(item){return item.isImputation;});totalCount=_response.totalCount;errorTimes=0;page++;}catch(err){errorTimes++;if(errorTimes>=_contact.CONTACT_API_RETRY_LIMIT){throw Error("getContactEventList errorTimes too many "+err);}}}if(eventList.length===0){throw new Error('getContactEventList no data');}return{isInit:false,eventList:eventList,isImputation:isImputation,lastModified:fetchTime};}));var addContactAction=exports.addContactAction=(0,_toolkit.createAction)('contact/addContract');var editContactAction=exports.editContactAction=(0,_toolkit.createAction)('contact/editContract');var deleteContactAction=exports.deleteContactAction=(0,_toolkit.createAction)('contact/deleteContract');var resetContact=exports.resetContact=(0,_toolkit.createAction)('contact/resetContact');var readImputationAction=exports.readImputationAction=(0,_toolkit.createAction)('contact/readImputation');var refreshContactMap=exports.refreshContactMap=(0,_toolkit.createAction)('contact/refreshContactMap');