var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _aelf=require("./aelf");var _aelfSdk=_interopRequireDefault(require("aelf-sdk"));jest.mock('aelf-sdk');beforeEach(function(){jest.restoreAllMocks();jest.clearAllMocks();});describe('isEqAddress',function(){test('params is empty, and return true',function(){var res=(0,_aelf.isEqAddress)();expect(res).toBe(true);});test('have one params, and return false',function(){var res=(0,_aelf.isEqAddress)('address');expect(res).toBe(false);});test('have two same params, and return true',function(){var res=(0,_aelf.isEqAddress)('address','ADDRESS');expect(res).toBe(true);});test('have two different params, and return false',function(){var res=(0,_aelf.isEqAddress)('address','ADD');expect(res).toBe(false);});});describe('isAelfAddress',function(){beforeEach(function(){jest.restoreAllMocks();});test('params is empty, and return false',function(){var res=(0,_aelf.isAelfAddress)();expect(res).toBe(false);});test('params without _, and return false',function(){var res=(0,_aelf.isAelfAddress)('add_re');expect(res).toBe(false);});test('params without _, and return false',function(){var res=(0,_aelf.isAelfAddress)('add_re_ss');expect(res).toBe(false);});test('params is 2A6...xHzh, mock, and return true',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.isAelfAddress)('2A6...xHzh');expect(res).toBe(true);});test('throw error, and return false',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockImplementation(function(){throw new Error('error');});var res=(0,_aelf.isAelfAddress)('2A6...xHzh');expect(res).toBe(false);});});describe('getChainNumber',function(){test('get AELF chain number',function(){jest.spyOn(_aelfSdk.default.utils.chainIdConvertor,'base58ToChainId').mockReturnValue(9992731);var res=(0,_aelf.getChainNumber)('AELF');expect(res).toBe(9992731);});});describe('isDIDAelfAddress',function(){test('input empty, and return false',function(){var res=(0,_aelf.isDIDAelfAddress)('');expect(res).toBe(false);});test('input add_r, and return false',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.isDIDAelfAddress)('add_r');expect(res).toBe(false);});test('input a_ddr, and throw error, return true',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.isDIDAelfAddress)('a_ddr');expect(res).toBe(true);});test('input a_ddr, and return true',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockImplementation(function(){throw new Error('error');});var res=(0,_aelf.isDIDAelfAddress)('a_ddr');expect(res).toBe(false);});test('input address without underline, and return false',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.isDIDAelfAddress)('address');expect(res).toBe(false);});test('input address without underline, throw error, and return false',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockImplementation(function(){throw new Error('error');});var res=(0,_aelf.isDIDAelfAddress)('address');expect(res).toBe(false);});});describe('getAddressInfo',function(){beforeEach(function(){jest.restoreAllMocks();});var prefix='AELF',address='av9c...8csu',suffix='ELF';test('the address is divided into four segments, and return empty string',function(){var res=(0,_aelf.getAddressInfo)(prefix+'_'+address+'_'+suffix+'_'+suffix);expect(res.prefix).toBe('');expect(res.address).toBe('');expect(res.suffix).toBe('');});test('only have address, and return successfully',function(){var res=(0,_aelf.getAddressInfo)(address);expect(res.prefix).toBe('');expect(res.address).toBe(address);expect(res.suffix).toBe('');});test('have address with prefix and suffix, and return successfully',function(){var res=(0,_aelf.getAddressInfo)(prefix+'_'+address+'_'+suffix);expect(res.prefix).toBe(prefix);expect(res.address).toBe(address);expect(res.suffix).toBe(suffix);});test('have address only with prefix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.getAddressInfo)(prefix+'_'+address);expect(res.prefix).toBe(prefix);expect(res.address).toBe(address);expect(res.suffix).toBe('');});test('have address with only suffix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.getAddressInfo)(address+'_'+suffix);expect(res.prefix).toBe('');expect(res.address).toBe(address);expect(res.suffix).toBe(suffix);});});describe('getEntireDIDAelfAddress',function(){beforeEach(function(){jest.restoreAllMocks();});var defaultPrefix='ELF',value='av9c...8csu',defaultSuffix='AELF';test('have three complete params, and return successfully',function(){var res=(0,_aelf.getEntireDIDAelfAddress)(value,defaultPrefix,defaultSuffix);expect(res).toBe(defaultPrefix+'_'+value+'_'+defaultSuffix);});test('have a complete value param, and return successfully',function(){var res=(0,_aelf.getEntireDIDAelfAddress)(defaultPrefix+'_'+value+'_'+defaultSuffix);expect(res).toBe(defaultPrefix+'_'+value+'_'+defaultSuffix);});test('have a error value param, and return empty',function(){var res=(0,_aelf.getEntireDIDAelfAddress)(defaultPrefix+'_'+value+'_'+defaultSuffix+'_'+defaultSuffix);expect(res).toBe('');});test('have a empty value param, and return error',function(){var res=(0,_aelf.getEntireDIDAelfAddress)('');expect(res).toBe(defaultPrefix+'__'+defaultSuffix);});test('have value only with prefix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.getEntireDIDAelfAddress)(defaultPrefix+'_'+value);expect(res).toBe(defaultPrefix+'_'+value+'_'+defaultSuffix);});test('have value with only suffix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.getEntireDIDAelfAddress)(value+'_'+defaultSuffix);expect(res).toBe(defaultPrefix+'_'+value+'_'+defaultSuffix);});});describe('isAllowAelfAddress',function(){beforeEach(function(){jest.restoreAllMocks();});var defaultPrefix='ELF',value='av9c...8csu',defaultSuffix='AELF';test('have a error value param, and return false',function(){var res=(0,_aelf.isAllowAelfAddress)(defaultPrefix+'_'+value+'_'+defaultSuffix+'_'+defaultSuffix);expect(res).toBe(false);});test('have a empty value param, and return false',function(){var res=(0,_aelf.isAllowAelfAddress)('');expect(res).toBe(false);});test('have a complete value param, and return true',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.isAllowAelfAddress)(defaultPrefix+'_'+value+'_'+defaultSuffix);expect(res).toBe(true);});test('have value only with prefix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.isAllowAelfAddress)(defaultPrefix+'_'+value);expect(res).toBe(false);});test('have value with only suffix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.isAllowAelfAddress)(value+'_'+defaultSuffix);expect(res).toBe(true);});});describe('getAelfAddress',function(){beforeEach(function(){jest.restoreAllMocks();});var defaultPrefix='ELF',value='av9c...8csu',defaultSuffix='AELF';test('have value with only suffix, and return successfully',function(){var res=(0,_aelf.getAelfAddress)();expect(res).toBe('');});test('have a complete value param, and return true',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.getAelfAddress)(defaultPrefix+'_'+value+'_'+defaultSuffix);expect(res).toBe(value);});test('have value only with prefix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.getAelfAddress)(defaultPrefix+'_'+value);expect(res).toBe(defaultPrefix+'_'+value);});test('have value with only suffix, and return successfully',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.getAelfAddress)(value+'_'+defaultSuffix);expect(res).toBe(value);});});describe('getWallet',function(){beforeEach(function(){jest.restoreAllMocks;});test('mock data, and return successfully',function(){var wallet={mnemonic:'',BIP44Path:'m.../0',childWallet:'',keyPair:{},privateKey:'f6e...6f71',address:'N99...zCY1'};jest.spyOn(_aelfSdk.default.wallet,'getWalletByPrivateKey').mockReturnValue(wallet);var res=(0,_aelf.getWallet)();expect(res).toEqual(wallet);});});describe('getAelfInstance',function(){beforeEach(function(){jest.restoreAllMocks;});test('mock function, and return successfully',function(){jest.spyOn(_aelfSdk.default.providers,'HttpProvider').mockReturnValue(jest.fn());var res=(0,_aelf.getAelfInstance)('');expect(res).toBeInstanceOf(_aelfSdk.default);});});describe('getELFContract',function(){beforeEach(function(){jest.restoreAllMocks;});var wallet={mnemonic:'',BIP44Path:'m.../0',childWallet:'',keyPair:{},privateKey:'f6e...6f71',address:'N99...zCY1'};test('mock function, and return successfully',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_aelfSdk.default).mockReturnValue({chain:{contractAt:jest.fn(function(){return'contract';})}});jest.spyOn(_aelfSdk.default.providers,'HttpProvider').mockReturnValue(jest.fn());jest.spyOn(_aelfSdk.default.wallet,'getWalletByPrivateKey').mockReturnValue(wallet);var res=yield(0,_aelf.getELFContract)('','','');expect(res).toBe('contract');}));test('mock function, and return successfully',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_aelfSdk.default).mockReturnValue({chain:{contractAt:jest.fn(function(){return'contract';})}});jest.spyOn(_aelfSdk.default.providers,'HttpProvider').mockReturnValue(jest.fn());jest.spyOn(_aelfSdk.default.wallet,'getWalletByPrivateKey').mockReturnValue(wallet);var res=yield(0,_aelf.getELFContract)('https://localhost','0x1...7890','privateKey');expect(res).toBe('contract');}));});describe('transformArrayToMap',function(){test('origin is undefined, and return empty string',function(){var res=(0,_aelf.transformArrayToMap)({},undefined);expect(res).toBe('');});test('inputType is empty object, origin is string, and return origin',function(){var res=(0,_aelf.transformArrayToMap)({},'origin');expect(res).toBe('origin');});test('inputType is empty object, origin is empty array, and return empty string',function(){var res=(0,_aelf.transformArrayToMap)({},[]);expect(res).toBe('');});test('trigger [ !resolvedType.name ] condition',function(){var res=(0,_aelf.transformArrayToMap)({},['origin']);expect(res).toEqual(['origin']);});test('trigger [ resolvedType.name !== name ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'address'},['origin']);expect(res).toEqual(['origin']);});test('trigger [ !resolvedType.fieldsArray ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'Address'},['origin']);expect(res).toEqual(['origin']);});test('trigger [ resolvedType?.fieldsArray[0].type === "bytes" ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'Address',fieldsArray:[{type:'bytes'}]},['origin']);expect(res).toBe('origin');});test('trigger [ resolvedType.fieldsArray.length !== 1 ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'Address',fieldsArray:[]},['origin']);expect(res).toEqual(['origin']);});test('trigger [ fieldsLength === 1 ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'Address',fieldsArray:[{type:'byte',name:'byte'}]},['origin']);expect(res).toEqual({byte:'origin'});});test('trigger [ fieldsLength === 2 ] condition',function(){var res=(0,_aelf.transformArrayToMap)({name:'Address',fieldsArray:[{type:'byte',name:'byte'},{type:'bytes',name:'bytes'}]},['origin']);expect(res).toEqual({'0':'origin',byte:'origin',bytes:undefined});});});describe('encodedTx',function(){var instance={chain:{getChainStatus:function getChainStatus(){return{ChainId:'AELF'};}}};test('return resolved value',(0,_asyncToGenerator2.default)(function*(){var contract={functionName:{getSignedTx:jest.fn().mockResolvedValue('raw')}};var res=yield(0,_aelf.encodedTx)({instance:instance,functionName:'functionName',paramsOption:'paramsOption',contract:contract});expect(res).toBe('raw');}));test('return rejected value',(0,_asyncToGenerator2.default)(function*(){var contract={functionName:{getSignedTx:jest.fn().mockRejectedValue({code:500})}};var res=yield(0,_aelf.encodedTx)({instance:instance,functionName:'functionName',paramsOption:'paramsOption',contract:contract});expect(res.error).toEqual({code:500});}));});describe('isCrossChain',function(){test('toAddress does not contain underscores, and return false',function(){var res=(0,_aelf.isCrossChain)('address','AELF');expect(res).toBe(false);});test('toAddress is right, and not cross chain',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(true);var res=(0,_aelf.isCrossChain)('ELF_address_AELF','AELF');expect(res).toBe(false);});test('toAddress is right, and cross chain',function(){jest.spyOn(_aelfSdk.default.utils,'decodeAddressRep').mockReturnValue(false);var res=(0,_aelf.isCrossChain)('ELF_address_tDVV','AELF');expect(res).toBe(true);});});