var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _useRecent=require("../../../hooks/hooks-ca/useRecent");var _slice=require("./slice");var _api=require("./api");var _toolkit=require("@reduxjs/toolkit");jest.mock("./api");var reducer=_slice.recentSlice.reducer;describe('initCurrentChainRecentData',function(){test('Init new caAddress recent data',function(){var newState=reducer({},(0,_slice.initCurrentChainRecentData)({caAddress:'caAddress'}));expect(newState).toHaveProperty('caAddress');});test('add a new caAddress recent data',function(){var newState=reducer({caAddress:_useRecent.initialRecentData},(0,_slice.initCurrentChainRecentData)({caAddress:'caAddress2'}));expect(Object.keys(newState)).toHaveLength(2);});});describe('resetRecent',function(){test('Reset recent, set initialState',function(){var newState=reducer({caAddress:_useRecent.initialRecentData},(0,_slice.resetRecent)());expect(newState).toEqual({});});});describe('fetchRecentListAsync',function(){var mockRecentItem={chainId:'AELF',caAddress:'caAddress',address:'address',addressChainId:'AELF',transactionTime:'123456789',name:'',addresses:[],id:'id',index:'',modificationTime:0,isDeleted:true,userId:'userId'};test('At the first time, to get recentList successful',(0,_asyncToGenerator2.default)(function*(){var mockStore=(0,_toolkit.configureStore)({reducer:reducer});jest.mocked(_api.fetchRecentTransactionUsers).mockResolvedValue({data:[{}],totalRecordCount:1});var mockPayload={caAddress:'caAddress',caAddressInfos:[{chainId:'AELF',caAddress:'caAddress'}]};yield mockStore.dispatch((0,_slice.fetchRecentListAsync)(mockPayload));expect(_api.fetchRecentTransactionUsers).toBeCalled();expect(mockStore.getState()).toHaveProperty('caAddress');expect(mockStore.getState().caAddress).toHaveProperty('totalRecordCount',1);}));test('Multiply get recentList successful',(0,_asyncToGenerator2.default)(function*(){var mockStore=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:{caAddress:{isFetching:false,totalRecordCount:1,skipCount:1,maxResultCount:10,recentContactList:[mockRecentItem]}}});jest.mocked(_api.fetchRecentTransactionUsers).mockResolvedValue({data:[mockRecentItem],totalRecordCount:1});var mockPayload={caAddress:'caAddress',caAddressInfos:[{chainId:'AELF',caAddress:'caAddress'}],isFirstTime:false};yield mockStore.dispatch((0,_slice.fetchRecentListAsync)(mockPayload));expect(_api.fetchRecentTransactionUsers).toBeCalled();expect(mockStore.getState().caAddress.recentContactList).toHaveLength(2);}));});