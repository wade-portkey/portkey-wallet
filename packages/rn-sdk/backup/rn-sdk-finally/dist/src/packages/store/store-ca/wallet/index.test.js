var _interopRequireDefault=require("@babel/runtime/helpers/interopRequireDefault");var _asyncToGenerator2=_interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));var _verifier=require("../../../types/verifier");var _actions=require("./actions");var _utils=require("../../wallet/utils");var _slice=require("./slice");var _type=require("./type");var _utils2=require("./utils");var _utils3=require("../../../api/api-did/es/utils");var _toolkit=require("@reduxjs/toolkit");var reducer=_slice.walletSlice.reducer;jest.mock("./utils");jest.mock("../../wallet/utils");jest.mock("../../../api/api-did/es/utils");beforeEach(function(){jest.restoreAllMocks();});describe('changeNetworkType',function(){var state={walletAvatar:'master6',walletType:'aelf',walletName:'Wallet 01',currentNetwork:'MAIN',chainList:[]};test('Pre network is MAIN. set current network MAIN',function(){expect(reducer(state,(0,_actions.changeNetworkType)('MAIN'))).toEqual(state);});test('Pre network is MAIN. set current network TESTNET',function(){expect(reducer(state,(0,_actions.changeNetworkType)('TESTNET'))).toEqual(Object.assign({},state,{currentNetwork:'TESTNET'}));});});describe('resetWallet',function(){var curState={walletAvatar:'master6',walletType:'aelf',walletName:'Wallet Name',currentNetwork:'TESTNET',chainList:[]};beforeEach(function(){jest.restoreAllMocks();});test('WalletInfo will be reset',function(){var res=reducer(curState,(0,_actions.resetWallet)());expect(res.walletName).toEqual('Wallet 01');expect(res.currentNetwork).toEqual('MAIN');});});describe('setCAInfo',function(){var payload={caInfo:{caAddress:'caAddress',caHash:'caHash'},pin:'pin',chainId:'AELF'};test('AESEncryptMnemonic does not exist, throw error',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};expect(function(){return reducer(mockState,(0,_actions.setCAInfo)(payload));}).toThrowError(_type.WalletError.noCreateWallet);});test('payload `s current network dose not exist, update default current network',function(){var _reducer$walletInfo;jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{},MAIN:{}}}};expect((_reducer$walletInfo=reducer(mockState,(0,_actions.setCAInfo)(payload)).walletInfo)==null?void 0:_reducer$walletInfo.caInfo.MAIN.AELF).toEqual({caAddress:'caAddress',caHash:'caHash'});});test('Update chainInfo',function(){var _reducer$walletInfo2;jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{},MAIN:{}}}};expect((_reducer$walletInfo2=reducer(mockState,(0,_actions.setCAInfo)(payload)).walletInfo)==null?void 0:_reducer$walletInfo2.caInfo.TESTNET.AELF).toEqual({caAddress:'caAddress',caHash:'caHash'});});});describe('setManageInfo',function(){test('AESEncryptMnemonic does not exist, throw error',function(){jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};var payload={managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},pin:'pin',chainId:'AELF',networkType:'TESTNET'};expect(function(){return reducer(mockState,(0,_actions.setManagerInfo)(payload));}).toThrowError(_type.WalletError.noCreateWallet);});test('Ca account does not exist, throw error',function(){jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:0}},MAIN:{}}}};var payload={managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},pin:'pin',chainId:'AELF',networkType:'TESTNET'};expect(function(){return reducer(mockState,(0,_actions.setManagerInfo)(payload));}).toThrowError(_type.WalletError.caAccountExists);});test('Current network does not exist, will update default chainInfo',function(){var _reducer,_reducer$walletInfo3;jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',chainList:[],originChainId:'AELF',walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{}}}};var payload={managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},pin:'pin',chainId:'AELF'};expect((_reducer=reducer(mockState,(0,_actions.setManagerInfo)(payload)))==null?void 0:(_reducer$walletInfo3=_reducer.walletInfo)==null?void 0:_reducer$walletInfo3.caInfo.MAIN).toEqual({originChainId:'AELF',managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian}});});test('Update chainInfo',function(){var _reducer2,_reducer2$walletInfo;jest.mocked(_utils2.checkPassword).mockReturnValue('true');var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],originChainId:'AELF',walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{MAIN:{}}}};var payload={managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},pin:'pin',chainId:'AELF',networkType:'TESTNET'};expect((_reducer2=reducer(mockState,(0,_actions.setManagerInfo)(payload)))==null?void 0:(_reducer2$walletInfo=_reducer2.walletInfo)==null?void 0:_reducer2$walletInfo.caInfo.TESTNET).toEqual({originChainId:'AELF',managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian}});});});describe('changePin',function(){var payload={pin:'111111',newPin:'222222'};var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'111111',AESEncryptMnemonic:'222222',caInfo:{TESTNET:{},MAIN:{}}}};test('WalletInfo does not exist, throw error',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};expect(function(){return reducer(mockState,(0,_actions.changePin)(payload));}).toThrowError(_type.WalletError.noCreateWallet);});test('WalletInfo does not exist, update AESEncryptMnemonic',function(){var _reducer$walletInfo4;jest.mocked(_utils.changeEncryptStr).mockReturnValue('AESEncryptMnemonic');expect((_reducer$walletInfo4=reducer(mockState,(0,_actions.changePin)(payload)).walletInfo)==null?void 0:_reducer$walletInfo4.AESEncryptMnemonic).toEqual('AESEncryptMnemonic');});test('WalletInfo does not exist, update AESEncryptPrivateKey',function(){var _reducer$walletInfo5;jest.mocked(_utils.changeEncryptStr).mockReturnValue('AESEncryptPrivateKey');expect((_reducer$walletInfo5=reducer(mockState,(0,_actions.changePin)(payload)).walletInfo)==null?void 0:_reducer$walletInfo5.AESEncryptPrivateKey).toEqual('AESEncryptPrivateKey');});});describe('setCAInfoType',function(){jest.mocked(_utils2.checkPassword).mockReturnValue('true');var payload={caInfo:{AELF:{caAddress:'caAddress',caHash:'caHash'}},pin:'pin',networkType:'TESTNET'};test('WalletInfo does not exist, throw error',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};expect(function(){return reducer(mockState,(0,_actions.setCAInfoType)(payload));}).toThrowError(_type.WalletError.noCreateWallet);});test('Current network does not exist, will update MAIN caInfo',function(){var _reducer$walletInfo6;var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{},MAIN:{}}}};var payload={caInfo:{AELF:{caAddress:'caAddress',caHash:'caHash'}},pin:'pin'};expect((_reducer$walletInfo6=reducer(mockState,(0,_actions.setCAInfoType)(payload)).walletInfo)==null?void 0:_reducer$walletInfo6.caInfo.MAIN).toEqual({AELF:{caAddress:'caAddress',caHash:'caHash'}});});test('WalletInfo exist, update caInfo',function(){var _reducer$walletInfo7;var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{},MAIN:{}}}};expect((_reducer$walletInfo7=reducer(mockState,(0,_actions.setCAInfoType)(payload)).walletInfo)==null?void 0:_reducer$walletInfo7.caInfo.TESTNET).toEqual({AELF:{caAddress:'caAddress',caHash:'caHash'}});});});describe('getCaHolderInfoAsync',function(){var preloadedState={wallet:{walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{AELF:{caAddress:'caAddress',caHash:'caHash'}},MAIN:{}}}}};var store=(0,_toolkit.configureStore)({reducer:reducer,preloadedState:preloadedState});test('Update walletName resolved',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_utils3.getCaHolder).mockResolvedValue({items:[{userId:'userId',caAddress:'caAddress',caHash:'caHash',id:'id',nickName:'nickName'}]});yield store.dispatch((0,_actions.getCaHolderInfoAsync)());expect(_utils3.getCaHolder).toBeCalled();expect(store.getState().walletName).toEqual('nickName');}));test('Update walletName rejected',(0,_asyncToGenerator2.default)(function*(){jest.mocked(_utils3.getCaHolder).mockRejectedValue({error:'error'});yield store.dispatch((0,_actions.getCaHolderInfoAsync)());expect(_utils3.getCaHolder).toBeCalled();}));});describe('setWalletNameAction',function(){test('Update walletName',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};expect(reducer(mockState,(0,_actions.setWalletNameAction)('new WalletName')).walletName).toEqual('new WalletName');});});describe('setOriginChainId',function(){test('Set originChainId successful',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};expect(reducer(mockState,(0,_actions.setOriginChainId)('tDVV')).originChainId).toEqual('tDVV');});});describe('resetCaInfo',function(){test('AESEncryptMnemonic does not exist, throw error',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};var payload='MAIN';expect(function(){return reducer(mockState,(0,_actions.resetCaInfo)(payload));}).toThrow(_type.WalletError.noCreateWallet);});test('Reset current network caInfo',function(){var _reducer$walletInfo8;var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic',caInfo:{TESTNET:{},MAIN:{}}}};var payload='TESTNET';expect((_reducer$walletInfo8=reducer(mockState,(0,_actions.resetCaInfo)(payload)).walletInfo)==null?void 0:_reducer$walletInfo8.caInfo).not.toHaveProperty('TESTNET');});});describe('setChainListAction',function(){test('chainInfo does not exist, state will add a chainInfo property',function(){var chainList=[{chainId:'AELF',chainName:'AELF',endPoint:'http://localhost:1235',explorerUrl:'http://localhost:1235',caContractAddress:'caContractAddress',defaultToken:{address:'address',decimals:'8',imageUrl:'http://imageurl.icon',name:'ELF',symbol:'ELF'}}];var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[]};var networkType='TESTNET';var newState=reducer(mockState,(0,_actions.setChainListAction)({chainList:chainList,networkType:networkType}));expect(newState).toHaveProperty('chainInfo');expect(newState.chainInfo).toHaveProperty('TESTNET');});test('chainInfo exist, chainInfo will be update',function(){var _newState$chainInfo,_newState$chainInfo2;var chainList=[{chainId:'tDVV',chainName:'tDVV',endPoint:'http://localhost:1235',explorerUrl:'http://localhost:1235',caContractAddress:'caContractAddress',defaultToken:{address:'address',decimals:'8',imageUrl:'http://imageurl.icon',name:'ELF',symbol:'ELF'}}];var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],chainInfo:{TESTNET:[{chainId:'AELF',chainName:'AELF',endPoint:'http://localhost:1235',explorerUrl:'http://localhost:1235',caContractAddress:'caContractAddress',defaultToken:{address:'address',decimals:'8',imageUrl:'http://imageurl.icon',name:'ELF',symbol:'ELF'}}]}};var networkType='TESTNET';var newState=reducer(mockState,(0,_actions.setChainListAction)({chainList:chainList,networkType:networkType}));expect((_newState$chainInfo=newState.chainInfo)==null?void 0:_newState$chainInfo.TESTNET).toHaveLength(1);expect((_newState$chainInfo2=newState.chainInfo)==null?void 0:_newState$chainInfo2.TESTNET).toEqual(chainList);});});describe('createWalletAsync',function(){var mockState={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',currentNetwork:'TESTNET',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address'}};var payload={networkType:'TESTNET',walletInfo:{BIP44Path:'string',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic'},caInfo:{originChainId:'AELF',managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},AELF:{caAddress:'caAddress',caHash:'caHash'}}};test('AESEncryptMnemonic does not exist, throw error',(0,_asyncToGenerator2.default)(function*(){var state=Object.assign({},mockState,{walletInfo:Object.assign({},mockState.walletInfo,{AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic'})});expect(function(){return reducer(state,(0,_actions.createWalletAction)(payload));}).toThrow(_type.WalletError.walletExists);}));test('caInfo is empty, will be update',(0,_asyncToGenerator2.default)(function*(){var _res$walletInfo;var payload={walletInfo:{BIP44Path:'string',address:'address',AESEncryptPrivateKey:'AESEncryptPrivateKey',AESEncryptMnemonic:'AESEncryptMnemonic'},caInfo:{managerInfo:{managerUniqueId:'managerUniqueId',loginAccount:'1@q.com',type:0,verificationType:_verifier.VerificationType.addGuardian},AELF:{caAddress:'caAddress',caHash:'caHash'}}};var state={walletAvatar:'master1',walletType:'aelf',walletName:'Wallet 02',chainList:[],walletInfo:{BIP44Path:'BIP44Path',address:'address'}};var res=reducer(state,(0,_actions.createWalletAction)(payload));expect((_res$walletInfo=res.walletInfo)==null?void 0:_res$walletInfo.caInfo.MAIN).toEqual(payload.caInfo);}));test('caInfo is not empty, will be update',(0,_asyncToGenerator2.default)(function*(){var _res$walletInfo2;var res=reducer(mockState,(0,_actions.createWalletAction)(payload));expect((_res$walletInfo2=res.walletInfo)==null?void 0:_res$walletInfo2.caInfo.TESTNET).toEqual(payload.caInfo);}));});